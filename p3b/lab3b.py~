import csv
import math

block_dict = {}
inode_dict = {}
total_num_blocks = 0
total_num_inodes = 0


class Inode:
    def __init__(self, free, link_count, file_type, dir_ref_list):
        self.free = free # on free list (bool)
        self.link_count = link_count # link count
        self.file_type = file_type # file type
        self.dir_ref_list = dir_ref_list # info about directory that contains entry referencing this inode (directory inode number, name of the entry)

class Block:
    def __init__(self, free, inode_ref_list):
        self.free = free # on free list (bool)
        self.inode_ref_list = inode_ref_list  # info about inodes that refers to this block (level, inode number, offset)

def main():
    with open('trivial.csv', 'r') as fid:
        csv_reader = csv.reader(fid, delimiter=',')
        data = [[int(element) if element.isdigit() else element for element in row] for row in csv_reader]
    
    
    # fill the data structure
    for row in data:
        if row[0] == "SUPERBLOCK":
            total_num_blocks = row[1]
            total_num_inodes = row[2]
            num_inodes = row[7] - 1
            block_size = row[3]
            inode_size = row[4]
        if row[0] == "GROUP":
            reserved = []
            reserved.append(row[6])
            reserved.append(row[7])
            reserved.append(row[8]) #reserved[2]: block number of first inode table entry
            reserved.append(0)
            reserved.append(1)
            reserved.append(2)
        if row[0] == "BFREE":
            if row[1] not in block_dict:
                block_dict[row[1]] = Block(True, [])
            else:
                block_dict[row[1]].free = True
        if row[0] == "IFREE":
            if row[1] not in inode_dict:
                inode_dict[row[1]] = Inode(True, 0, 'n', [])
            else:
                inode_dict[row[1]].free = True
        if row[0] == "INODE":
            if row[1] not in inode_dict:
                inode_dict[row[1]] = Inode(False, row[6], row[2], [])
            else:
                inode_dict[row[1]].link_count = row[6]
                inode_dict[row[1]].file_type = row[2]
            if len(row) > 13 and not (row[2] == 's' and row[10] < 60):
                for i in range(12,24): # check direct blocks referenced by the inode
                    if row[i] == 0:
                        continue
                    if row[i] not in block_dict:
                        block_dict[row[i]] = Block(False, [[0, row[1], i]])
                    else:
                        block_dict[row[i]].inode_ref_list.append([0, row[1], i])
                if(row[24] != 0):
                    if row[i] not in block_dict:
                        block_dict[row[i]] = Block(False, [[1, row[1], i]])
                    else:
                        block_dict[row[i]].inode_ref_list.append([1, row[1], i])
                if(row[25] != 0):
                    if row[i] not in block_dict:
                        block_dict[row[i]] = Block(False, [[2, row[1], i]])
                    else:
                        block_dict[row[i]].inode_ref_list.append([2, row[1], i])
                if(row[26] != 0):
                    if row[i] not in block_dict:
                        block_dict[row[i]] = Block(False, [[3, row[1], i]])
                    else:
                        block_dict[row[i]].inode_ref_list.append([3, row[1], i])
        if row[0] == "INDIRECT":
            if row[5] not in block_dict:
                block_dict[row[5]] = Block(False, [[row[2], row[1], row[3]]])
            else:
                block_dict[row[5]].inode_ref_list.append([row[2], row[1], row[3]])
        if row[0] == "DIRENT":
            if row[3] not in inode_dict:
                inode_dict[row[3]] = Inode(False, 0, 'n', [[row[1], row[6]]])
            else:        
                inode_dict[row[3]].dir_ref_list.append([row[1], row[6]])

    # Block consistency
    for block_num in block_dict:
        block = block_dict[block_num]

        #Invalid block number
        if(block_num < 0 or block_num > total_num_blocks):
            for inode_ref in block.inode_ref_list:
                print("INVALID", end=" ")
                if inode_ref[0] == 1:
                    print("INDIRECT", end=" ")
                elif inode_ref[0] == 2:
                    print("DOUBLE INDIRECT", end=" ")
                elif inode_ref[0] == 3:
                    print("TRIPLE INDIRECT", end=" ")
                print(str(block_num) + " IN INODE " + str(inode_ref[1]) + " AT OFFSET " + str(inode_ref[2]))

        #Reserved block number
        if block_num in reserved:
            for inode_ref in block.inode_ref_list:
                print("RESERVED", end=" ")
                if inode_ref[0] == 1:
                    print("INDIRECT", end=" ")
                elif inode_ref[0] == 2:
                    print("DOUBLE INDIRECT", end=" ")
                elif inode_ref[0] == 3:
                    print("TRIPLE INDIRECT", end=" ")
                print(str(block_num) + " IN INODE " + str(inode_ref[1]) + " AT OFFSET " + str(inode_ref[2]))

        #Unreferenced and allocated blocks
        first_data_block = reserved[2] + math.floor(inode_size * num_inodes / block_size) + 1
        for i in range(first_data_block, total_num_blocks):
            if i not in block_dict:
                print("UNREFERENCED BLOCK " + str(i))
            elif block_dict[i].free and len(block_dict[i].inode_ref_list) != 0:
                print("ALLOCATED BLOCK" + str(i))
                
if __name__ == "__main__":
    main()
